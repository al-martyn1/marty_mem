/*! \file
    \brief Симуляция памяти
 */

#pragma once

//----------------------------------------------------------------------------
/*
    Память представляем в виде unordered_map

*/

//----------------------------------------------------------------------------
#include "assert.h"
#include "bits.h"
#include "enums.h"
#include "types.h"
#include "utils.h"

//
#include <unordered_map>

//----------------------------------------------------------------------------



//----------------------------------------------------------------------------
// #include "marty_mem/marty_mem.h"
// marty::mem::
namespace marty{
namespace mem{

//----------------------------------------------------------------------------



//----------------------------------------------------------------------------
struct MemPara
{
    byte_t     para[16]  = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
    uint16_t   validBits = 0; // единичный бит говорит, что память была ранее присвоена, 0 - память неинициализирована

}; // struct MemPara


//----------------------------------------------------------------------------
class Memory
{

    std::unordered_map<uint64_t, MemPara>   m_memMap;


public:




}; // class Memory

// unaligned access невыровненный доступ
// aligned access   согласованный доступ


//----------------------------------------------------------------------------

} // namespace mem
} // namespace marty
// marty::mem::
// #include "marty_mem/marty_mem.h"
