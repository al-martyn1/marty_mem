/*! \file
    \brief Autogenerated enumerations (Umba Enum Gen)
 */

#pragma once


#include "marty_cpp/marty_enum.h"

#include <exception>
#include <map>
#include <stdexcept>
#include <string>
#include <unordered_map>



namespace marty{
namespace mem{


/*!  Endianness */
//#!Endianness
enum class Endianness : std::uint32_t
{
    unknown          = (std::uint32_t)(-1) /*!<  */,
    invalid          = (std::uint32_t)(-1) /*!<  */,
    undefined        = (std::uint32_t)(-1) /*!<  */,
    littleEndian     = 0x0000 /*!<  */,
    bigEndian        = 0x0001 /*!<  */,
    leMiddleEndian   = 0x0002 /*!<  */,
    beMiddleEndian   = 0x0003 /*!<  */,
    middleEndian     = 0x0004 /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(Endianness)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( Endianness, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Endianness::unknown          , "Unknown"        );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Endianness::bigEndian        , "BigEndian"      );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Endianness::littleEndian     , "LittleEndian"   );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Endianness::leMiddleEndian   , "LeMiddleEndian" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Endianness::beMiddleEndian   , "BeMiddleEndian" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Endianness::middleEndian     , "MiddleEndian"   );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( Endianness, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( Endianness, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Endianness::unknown          , "unknown"          );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Endianness::unknown          , "invalid"          );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Endianness::unknown          , "undefined"        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Endianness::bigEndian        , "big-endian"       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Endianness::bigEndian        , "big_endian"       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Endianness::bigEndian        , "bigendian"        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Endianness::littleEndian     , "little-endian"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Endianness::littleEndian     , "little_endian"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Endianness::littleEndian     , "littleendian"     );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Endianness::leMiddleEndian   , "le-middle-endian" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Endianness::leMiddleEndian   , "le_middle_endian" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Endianness::leMiddleEndian   , "lemiddleendian"   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Endianness::beMiddleEndian   , "be-middle-endian" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Endianness::beMiddleEndian   , "be_middle_endian" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Endianness::beMiddleEndian   , "bemiddleendian"   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Endianness::middleEndian     , "middle-endian"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Endianness::middleEndian     , "middle_endian"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Endianness::middleEndian     , "middleendian"     );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( Endianness, std::map, 1 )

} // namespace mem
} // namespace marty

